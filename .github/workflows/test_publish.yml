name: Test publishing cohort_sdk_js pre-built

on:
    push:
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+-gk.*'
    workflow_dispatch: # Allows manual triggering
env:
    REGISTRY: "https://npm.pkg.github.com"
    SDK_JS_PACKAGE_NAME: "@kindredgroup/cohort_sdk_js"
    DIR_SDK_JS: packages/cohort_sdk_js
    DIR_SDK_JS_CLIENT: cohort_sdk_client
jobs:
  prebuild:
    name: Build for ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest]
        # arch: [x64, arm64] # macOS M1 (arm64) and Intel (x64)
        os: [macos-latest]
        arch: [arm64] # macOS M1 (arm64) and Intel (x64)
        # include:
        #   # Define specific target triples for Linux ARM64 if needed,
        #   # though napi-rs often handles musl and gnu variations
        #   # without explicit target in simple cases.
        #   # For musl, you might need to install `rustup target add aarch64-unknown-linux-musl`
        #   # and then use `cargo build --target aarch64-unknown-linux-musl`
        #   - os: ubuntu-latest
        #     arch: arm64
        #     # For cross-compilation on GitHub Actions, you might need to use a QEMU setup.
        #     # However, for NAPI-RS, it often provides pre-built toolchains or simplifies the process.
        #     # If `napi build --platform` doesn't work out of the box for ARM64 on x64 Linux runner,
        #     # you might need a dedicated ARM64 runner or more complex cross-compilation setup.
        #     # NAPI-RS handles cross-compilation quite well generally.

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          check-latest: true
          registry-url: "https://npm.pkg.github.com"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.75
        with:
          toolchain: 1.75
        #   target: ${{ matrix.rust_target }} # Use this if you need specific Rust targets

      - name: Install dependencies
        run: |-
            currentDir=$(pwd)
            cd $DIR_SDK_JS
            pwd
            ls -l
            npm install

      - name: Install libsasl2 (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libsasl2-dev

      - name: Install NAPI-RS CLI
        run: npm install -g @napi-rs/cli # Ensure the CLI is available globally or as a dev dependency

      - name: Build NAPI-RS Binary
        working-directory: ${{ env.DIR_SDK_JS }}
        # napi build automatically detects the platform and architecture
        # and builds the appropriate binary.
        # It handles `npm_config_target_arch` and `npm_config_target_platform`
        # for cross-compilation, but for GitHub Actions, the runner's
        # architecture is usually the target.
        # NAPI-RS CLI's `--platform` flag is crucial here.
        # It generates the prebuilt binaries in `target/napi-build/`
        # and places them in the correct `prebuilds` directory within your package.
        run: |-
            napi build --platform --release
            ls -l

      - name: Archive prebuilt binaries
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-binary-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ${{ env.DIR_SDK_JS }}/*.node
            ${{ env.DIR_SDK_JS }}/index.js
            ${{ env.DIR_SDK_JS }}/index.d.ts

  publish:
    name: Publish to NPM
    needs: prebuild # Ensure all prebuild jobs complete successfully
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v') # Only publish on successful tag pushes
    permissions:
      contents: read
      packages: write # Crucial for publishing to GitHub Packages

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16 # Or your desired Node.js version
          # cache: 'npm'
          check-latest: true
          registry-url: "https://npm.pkg.github.com"

      - name: Install dependencies
        working-directory: ${{ env.DIR_SDK_JS }}
        run: |-
          npm install
          ls -la

      - name: Download all prebuilt binaries
        uses: actions/download-artifact@v4
        with:
          path: . # Download artifacts to the root of the workspace

      - name: Move prebuilt binaries to correct location
        # This step is crucial. The `download-artifact` action downloads each artifact
        # into its own directory (e.g., `prebuilt-binary-macos-x64/prebuilds/`).
        # We need to move the contents of `prebuilds` from each artifact
        # into the main `prebuilds` directory of your project.
        run: |
          mkdir -p ${{ env.DIR_SDK_JS }}/prebuilds
          ls -la
          for dir in prebuilt-binary-*; do
            if [ -d "$dir" ]; then

              echo "Processing artifact directory: $dir"
              ls -la

              # Move .node files into the prebuilds folder within the target package
              find "$dir" -maxdepth 1 -name "*.node" -exec mv {} ${{ env.DIR_SDK_JS }}/prebuilds/ \;

              # Move index.js to the target package directory
              if [ -f "$dir/index.js" ]; then
                mv "$dir/index.js" ${{ env.DIR_SDK_JS }}/index.js
              fi

              # Move index.d.ts to the target package directory
              if [ -f "$dir/index.d.ts" ]; then
                mv "$dir/index.d.ts" ${{ env.DIR_SDK_JS }}/index.d.ts
              fi
            fi
          done
          echo "Contents of ${{ env.DIR_SDK_JS }} after consolidation:"
          ls -la ${{ env.DIR_SDK_JS }}/
          echo "Contents of${{ env.DIR_SDK_JS }}/prebuilds/ after consolidation:"
          ls -la ${{ env.DIR_SDK_JS }}/prebuilds/

      - name: "Extract tag name"
        shell: bash
        run: |-
          echo "VERSION_NAME=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: "Publish ${{env.DIR_SDK_JS}}to npm"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read package version from package.json
          # PACKAGE_VERSION=$(node -p "require('./package.json').version")

          # Check if the version contains a hyphen (indicating a pre-release)
          if echo "$VERSION_NAME" | grep -q '-'; then
            echo "Publishing pre-release version $VERSION_NAME with --tag dev"
            npm publish --foreground-scripts --tag dev # <-- Add --tag for pre-release versions
          else
            echo "Publishing stable version $VERSION_NAME"
            npm publish --foreground-scripts
          fi
        working-directory: ${{ env.DIR_SDK_JS }}
      - name: "Publish ${{env.DIR_SDK_JS_CLIENT}}to npm"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating $SDK_JS_PACKAGE_NAME to $VERSION_NAME"
          rm package-lock.json || true
          echo "D: npm install $SDK_JS_PACKAGE_NAME@$VERSION_NAME --foreground-scripts"
          npm install $SDK_JS_PACKAGE_NAME@$VERSION_NAME --foreground-scripts
          ls -lah node_modules
          echo ""
          echo "listing node_modules/@kindredgroup"
          ls -lah node_modules/@kindredgroup || true
          echo ""
          npm run build
          npm version
          pwd
          ls -l
          # Check if the version contains a hyphen (indicating a pre-release)
          if echo "$VERSION_NAME" | grep -q '-'; then
            echo "Publishing pre-release version $VERSION_NAME with --tag dev"
            npm publish --foreground-scripts --tag dev # <-- Add --tag for pre-release versions
          else
            echo "Publishing stable version $VERSION_NAME"
            npm publish --foreground-scripts
          fi
        working-directory: ${{ env.DIR_SDK_JS_CLIENT }}